{
	"info": {
		"_postman_id": "01ccad98-416f-4782-a21d-1365c2ebbd9e",
		"name": "05 - Performance Testing",
		"description": "StartFragment\n\n### **Performance Testing in Postman** 🚀\n\nPostman is primarily designed for API testing, but it also provides tools for **basic performance testing** using **collection runners** and **monitors**. Here's how you can make the most of Postman for performance testing!\n\n---\n\n### **Key Features for Performance Testing in Postman** 🛠️\n\n| **Feature** | **Description** | **Use Case** |\n| --- | --- | --- |\n| **Collection Runner** | Execute a series of requests multiple times to simulate load. | Test how your API performs under repeated calls. 🔄 |\n| **Postman Monitors** | Schedule automatic runs of collections to check performance over time. | Regular performance checks (e.g., daily or weekly). ⏰ |\n| **Postman Tests** | Create custom scripts to monitor response time, status codes, and other performance metrics. | Validate response time thresholds, error rates, etc. 📊 |\n\n---\n\n### **Steps to Perform Basic Performance Testing in Postman** 🔍\n\n1. **Create a Collection** 📂:\n    \n    - Organize your requests into a **Postman collection** for easy execution.\n        \n2. **Add Performance Tests** ⚙️:\n    \n    - jsCopyEditpm.test(\"Response time is less than 200ms\", function () { pm.response.to.have.responseTime.below(200);});\n        \n3. **Run the Collection Using Collection Runner** 🏃‍♀️:\n    \n    - Set the **iteration count** (e.g., run 1000 iterations).\n        \n    - Optionally, set a **delay** between requests to simulate real-world usage.\n        \n4. **Monitor the API Using Postman Monitors** 📅:\n    \n    - Set up **monitors** to schedule automated performance tests for continuous monitoring.\n        \n\n---\n\n### **Key Performance Metrics to Track** 📈\n\n| **Metric** | **Description** | **Postman Example** |\n| --- | --- | --- |\n| **Response Time** | Time taken for the server to respond to a request. | `pm.response.responseTime` → Assert response time below 200ms. ⏱️ |\n| **Throughput** | Number of requests served per unit of time (requests per second). | Calculated via **Collection Runner** or **Postman Monitor**. 📊 |\n| **Error Rate** | Percentage of failed requests (e.g., 4xx/5xx status codes). | `pm.response.to.have.status(200)` → Assert status is OK. ✅ |\n| **Response Size** | The size of the response body. | `pm.response.to.have.bodySize.below(1e+6)` → Assert body size under 1 MB. 📏 |\n| **Request Count** | The number of requests executed. | Monitor total requests executed in **Collection Runner**. 🔢 |\n\n---\n\n### **Limitations of Performance Testing in Postman** 🚫\n\n- **Limited Scalability**: Postman isn't designed for high-load simulations (e.g., 10,000 concurrent users). 🌐\n    \n- **Lack of Advanced Metrics**: No deep analytics like **JMeter** or **k6** for resource utilization and detailed insights. 🔍\n    \n- **Sequential Execution**: Performance tests run sequentially (request by request), limiting scalability for stress testing. ⏳\n    \n\n---\n\n### **Example Use Case for Performance Testing in Postman** 📝\n\n1. **Setup API Request**:  \n      \n    Example: Test a **GET request** to fetch user data from `/api/users`.\n    \n2. jsCopyEditpm.test(\"Response time is within 200ms\", function () { pm.response.to.have.responseTime.below(200);});pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200);});\n    \n3. **Run Collection**:\n    \n    - Set **iterations** to 500.\n        \n    - Track **response times** and ensure they remain below set thresholds.\n        \n4. **Monitor Results**:\n    \n    - Use **Postman Monitors** to schedule and continuously monitor API performance.\n        \n\n---\n\n### **When to Use Postman for Performance Testing** 🧐\n\n- **Small-Scale Testing**: Great for testing individual APIs or checking response time under normal traffic. 🔄\n    \n- **Continuous Monitoring**: Ideal for periodic performance checks (e.g., daily or weekly) via **Postman Monitors**. ⏰\n    \n- **Response Time Validation**: Ensure that response times are within acceptable limits. ✅\n    \n\n---\n\n### **Conclusion** 🏁\n\nPostman provides a **user-friendly** way to perform **basic performance testing**, with features like **Collection Runner**, **Monitors**, and **Test Scripts**. However, for larger-scale, high-load, or more detailed testing, consider using **specialized tools** like **JMeter**, **k6**, or **LoadRunner**. 🚀\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create a deal",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ade5f552-c084-4cb3-a540-3be467bc85c5",
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.collectionVariables.set('token', response.authToken)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ca2af049-41bd-4a09-9a7c-204bdecf849e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dealerId\": \"{{login_dmsDealerId}}\",\n    \"userName\": \"{{login_username}}\",\n    \"password\": \"{{login_password}}\",\n    \"token\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/{{authentication_endpoint}}"
					},
					"response": []
				},
				{
					"name": "get Customer Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21d94098-7d5e-4b6f-9eff-496f0db59691",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"let testCategoryDetails;\r",
									"const cateogoryDetails = response.forEach(category => {\r",
									"    if(category.name === \"Employee\"){\r",
									"        testCategoryDetails = category;\r",
									"\r",
									"    }\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"categoryDealerId\",testCategoryDetails.dealerId)\r",
									"pm.collectionVariables.set(\"customerCategoryId\",testCategoryDetails.customerCategoryId)\r",
									"pm.collectionVariables.set(\"categoryLastUpdated\",testCategoryDetails.lastUpdated)\r",
									"pm.collectionVariables.set(\"categoryStatus\",testCategoryDetails.isActive)\r",
									"pm.collectionVariables.set(\"categoryName\",testCategoryDetails.name)\r",
									"\r",
									"// Verify the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verify the response time\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"// Verify the response body schema and properties\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(response).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Loop through each category in the response to verify its properties\r",
									"response.forEach(category => {\r",
									"    pm.test(`Verify category with ID ${category.customerCategoryId}`, function () {\r",
									"        pm.expect(category.dealerId).to.exist;\r",
									"        pm.expect(category.customerCategoryId).to.exist;\r",
									"        pm.expect(category.lastUpdated).to.exist;\r",
									"        pm.expect(category.isActive).to.exist;\r",
									"        pm.expect(category.name).to.exist;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dbe1e03e-bcae-4830-b93e-aa4cabefc88b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{host}}/{{customer_categories_endpoint}}"
					},
					"response": []
				},
				{
					"name": "Create a Customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99854cb5-d557-4518-bd55-902260337ba6",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a17b59a-5313-40a8-b47f-905b2b33e604",
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"// Test for status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for response time\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Test for response body properties and types\r",
									"pm.test(\"Verify response body properties and types\", function () {\r",
									"    \r",
									"    pm.expect(response.name).to.be.a('string');\r",
									"    pm.expect(response.firstName).to.be.a('string');\r",
									"    pm.expect(response.lastName).to.be.a('string');\r",
									"    pm.expect(response.middleName).to.be.a('string');\r",
									"    pm.expect(response.jobTitle).to.be.a('string');\r",
									"    pm.expect(response.crmCustomerId).to.be.a('number');\r",
									"    pm.expect(response.customerId).to.be.a('number');\r",
									"    pm.expect(response.dealerId).to.be.a('number');\r",
									"    pm.expect(response.isActive).to.be.a('boolean');\r",
									"    pm.expect(response.lastUpdated).to.be.a('string');\r",
									"    pm.expect(response.crmLastUpdated).to.be.a('string');\r",
									"    pm.expect(response.createdAt).to.be.a('string');\r",
									"    pm.expect(response.optIn).to.be.a('number');\r",
									"    pm.expect(response.optOutDate).to.be.null;\r",
									"    pm.expect(response.optInEmail).to.be.a('boolean');\r",
									"    pm.expect(response.optOutEmailDate).to.be.null;\r",
									"    pm.expect(response.customerNumber).to.be.a('string');\r",
									"    pm.expect(response.isOrganization).to.be.a('boolean');\r",
									"    pm.expect(response.organizationName).to.be.a('string');\r",
									"    pm.expect(response.salesRepName).to.be.a('string');\r",
									"    pm.expect(response.primaryCellPhoneId).to.be.null;\r",
									"    pm.expect(response.primaryEmailId).to.be.a('number');\r",
									"    pm.expect(response.notes).to.be.a('string');\r",
									"    pm.expect(response.defaultPhoneType).to.be.a('number');\r",
									"    pm.expect(response.dob).to.be.a('string');\r",
									"    pm.expect(response.isFacebookCustomer).to.be.a('boolean');\r",
									"    pm.expect(response.facebookCustomerId).to.be.null;\r",
									"    pm.expect(response.reviewFlag).to.be.a('boolean');\r",
									"    pm.expect(response.defaultPhoneNumberForMessenger).to.be.a('string');\r",
									"    pm.expect(response.customerPhones).to.be.an('array');\r",
									"    pm.expect(response.customerEmails).to.be.an('array');\r",
									"    pm.expect(response.customerAddresses).to.be.an('array');\r",
									"    pm.expect(response.customerCategories).to.be.an('array');\r",
									"    pm.expect(response.customerSurveyRating).to.be.null;\r",
									"    pm.expect(response.lastSurveyRating).to.be.null;\r",
									"    pm.expect(response.salesStageId).to.be.null;\r",
									"    pm.expect(response.conversationsPhoneIds).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test for response body array elements\r",
									"pm.test(\"Verify response body array elements\", function () {\r",
									"    \r",
									"    response.customerPhones.forEach(function(phone) {\r",
									"        pm.expect(phone.id).to.be.a('number');\r",
									"        pm.expect(phone.dealerId).to.be.a('number');\r",
									"        pm.expect(phone.customerId).to.be.a('number');\r",
									"        pm.expect(phone.crmCustomerId).to.be.a('number');\r",
									"        pm.expect(phone.phoneType).to.be.a('number');\r",
									"        pm.expect(phone.lastUpdated).to.be.a('string');\r",
									"        pm.expect(phone.phoneNumber).to.be.a('string');\r",
									"        // ... Add more assertions for other properties\r",
									"    });\r",
									"\r",
									"    response.customerEmails.forEach(function(email) {\r",
									"        pm.expect(email.id).to.be.a('number');\r",
									"        pm.expect(email.crmCustomerId).to.be.a('number');\r",
									"        pm.expect(email.customerId).to.be.a('number');\r",
									"        pm.expect(email.dealerId).to.be.a('number');\r",
									"        pm.expect(email.emailType).to.be.a('number');\r",
									"        pm.expect(email.address).to.be.a('string');\r",
									"        pm.expect(email.lastUpdated).to.be.a('string');\r",
									"        // ... Add more assertions for other properties\r",
									"    });\r",
									"\r",
									"    response.customerAddresses.forEach(function(address) {\r",
									"        pm.expect(address.id).to.be.a('number');\r",
									"        pm.expect(address.customerId).to.be.a('number');\r",
									"        pm.expect(address.dealerId).to.be.a('number');\r",
									"        pm.expect(address.crmCustomerId).to.be.a('number');\r",
									"        pm.expect(address.addressType).to.be.a('number');\r",
									"        pm.expect(address.address1).to.be.a('string');\r",
									"        pm.expect(address.address2).to.be.a('string');\r",
									"        pm.expect(address.city).to.be.a('string');\r",
									"        pm.expect(address.stateProvince).to.be.a('string');\r",
									"        pm.expect(address.zipPostal).to.be.a('string');\r",
									"        // ... Add more assertions for other properties\r",
									"    });\r",
									"\r",
									"    response.customerCategories.forEach(function(category) {\r",
									"        pm.expect(category.dealerId).to.be.a('number');\r",
									"        pm.expect(category.customerCategoryId).to.be.a('string');\r",
									"        pm.expect(category.lastUpdated).to.be.a('string');\r",
									"        pm.expect(category.isActive).to.be.a('boolean');\r",
									"        pm.expect(category.name).to.be.a('string');\r",
									"        // ... Add more assertions for other properties\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"createdCustomerId\", response.crmCustomerId)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6b4fdffc-5efb-4d3a-a13c-86639a330c65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"crmCustomerId\": 0,\r\n    \"customerId\": 0,\r\n    \"dealerId\": 888462,\r\n    \"organizationName\": \"\",\r\n    \"salesRepName\": \"Dean Riddle\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"middleName\": \"\",\r\n    \"isOrganization\": false,\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"dob\": \"04/01/2025\",\r\n    \"customerAddresses\": [\r\n        {\r\n            \"address1\": \"{{$randomStreetName}}\",\r\n            \"address2\": \"{{$randomStreetName}}\",\r\n            \"addressType\": \"1\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"stateProvince\": \"SC\",\r\n            \"zipPostal\": \"19231\",\r\n            \"stateShort\": \"SC\"\r\n        },\r\n        {\r\n            \"address1\": \"{{$randomStreetName}}\",\r\n            \"address2\": \"{{$randomStreetName}}\",\r\n            \"addressType\": \"2\",\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"stateProvince\": \"NY\",\r\n            \"zipPostal\": \"11368\",\r\n            \"stateShort\": \"NY\"\r\n        }\r\n    ],\r\n    \"customerCategories\": [\r\n        {\r\n            \"dealerId\": {{categoryDealerId}},\r\n            \"customerCategoryId\": \"{{customerCategoryId}}\",\r\n            \"lastUpdated\": \"{{categoryLastUpdated}}\",\r\n            \"isActive\": \"{{categoryStatus}}\",\r\n            \"name\": \"{{categoryName}}\"\r\n        }\r\n    ],\r\n    \"customerEmails\": [\r\n        {\r\n            \"address\": \"{{$randomExampleEmail}}\",\r\n            \"contactId\": 0,\r\n            \"dealerId\": 0,\r\n            \"emailType\": 6,\r\n            \"lastUpdated\": \"\",\r\n            \"isPrimary\": false,\r\n            \"isDefault\": true\r\n        },\r\n        {\r\n            \"address\": \"{{$randomExampleEmail}}\",\r\n            \"contactId\": 0,\r\n            \"dealerId\": 0,\r\n            \"emailType\": 7,\r\n            \"lastUpdated\": \"\",\r\n            \"isPrimary\": false,\r\n            \"isDefault\": false\r\n        },\r\n        {\r\n            \"address\": \"{{$randomExampleEmail}}\",\r\n            \"contactId\": 0,\r\n            \"dealerId\": 0,\r\n            \"emailType\": 64,\r\n            \"lastUpdated\": \"\",\r\n            \"isPrimary\": false,\r\n            \"isDefault\": false\r\n        }\r\n    ],\r\n    \"customerPhones\": [\r\n        {\r\n            \"id\": 0,\r\n            \"customerId\": 0,\r\n            \"dealerId\": 0,\r\n            \"lastUpdated\": \"\",\r\n            \"phoneNumber\": \"{{$randomPhoneNumber}}\",\r\n            \"extension\": \"\",\r\n            \"phoneType\": 236,\r\n            \"isPrimary\": false,\r\n            \"verificationStatus\": 1,\r\n            \"isDefault\": true\r\n        }\r\n    ],\r\n    \"conversationsPhoneIds\": [],\r\n    \"optIn\": 1,\r\n    \"optInEmail\": false,\r\n    \"optOutDate\": \"\",\r\n    \"notes\": \"{{$randomCatchPhrase}}\",\r\n    \"defaultPhoneType\": -1,\r\n    \"customerNumber\": \"{{$randomPassword}}\",\r\n    \"dateOfBirth\": null,\r\n    \"jobTitle\": \"\",\r\n    \"salesStageId\": 0,\r\n    \"defaultPhoneNumberForMessenger\": \"\",\r\n    \"reviewFlag\": false,\r\n    \"IsFacebookCustomer\": false,\r\n    \"FacebookCustomerId\": null\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/{{customer_endpoint}}",
						"description": "The HTTP POST request to `{{base_url}}/{{customer_endpoint}}` is used to create a new customer with the provided information. The request payload includes details such as the dealer ID, organization name, sales representative name, customer addresses, emails, phones, opt-in status, notes, and more.\n\nThe response of the request is a JSON schema representing the customer's details. It includes fields such as name, organization name, contact IDs, phone numbers, email addresses, addresses, opt-in status, notes, and more. The schema provides a structured format for understanding the data returned after creating a new customer."
					},
					"response": []
				},
				{
					"name": "Deals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dbb6b14-3ef9-4f7c-b550-0d3eafa7b7b7",
								"exec": [
									"// Test Scenario 1: Verify the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test Scenario 2: Verify the response time is less than 3000ms\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(3000);\r",
									"});\r",
									"\r",
									"// Test Scenario 3: Verify the response body contains the text \"Success\"\r",
									"pm.test(\"Response body contains 'Success'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e995be2-940a-4240-9248-4bd0d51574c3",
								"exec": [
									"const utilities = pm.require('@blorguy/utilities')\r",
									"\r",
									"const randomAmount = utilities.generateRandomNumber(5);\r",
									"\r",
									"pm.collectionVariables.set(\"dealAmount\", randomAmount)\r",
									"\r",
									"console.log(pm.request.toJSON())"
								],
								"type": "text/javascript",
								"packages": {
									"@blorguy/utilities": {
										"id": "0196966f-f345-7ce1-8cb7-f896de72f882"
									}
								}
							}
						}
					],
					"id": "40a644fe-8cc4-4b31-92d5-a7fb26e4c317",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": 0,\r\n    \"dealType\": 15,\r\n    \"customerContacts\": [\r\n        {\r\n            \"customerId\": \"{{createdCustomerId}}\",\r\n            \"contactId\": 0\r\n        }\r\n    ],\r\n    \"description\": \"{{$randomPhrase}}\",\r\n    \"title\": \"{{$randomFullName}}\",\r\n    \"assignedUserId\": \"a0cb3235-ea75-ef11-bdfd-00224845376a\",\r\n    \"createdByUserId\": \"a0cb3235-ea75-ef11-bdfd-00224845376a\",\r\n    \"pipelineId\": 34,\r\n    \"amount\": \"{{dealAmount}}\",\r\n    \"pipelineStageName\": \"New Stage\",\r\n    \"position\": 1,\r\n    \"pipelineStageId\": 222\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{host}}/{{deal_creation_endpoint}}/{{login_dmsDealerId}}}}",
						"description": "### Add New Deal\n\nThis endpoint allows you to add a new deal to the CRM system.\n\n#### Request Body\n\n- type (Number) - The type of the deal.\n    \n- dealType (Number) - The type of deal being added.\n    \n- customerContacts (Array) - An array of customer contacts associated with the deal, including customer and contact IDs.\n    \n- description (String) - The description of the deal.\n    \n- title (String) - The title of the deal.\n    \n- assignedUserId (String) - The ID of the user to whom the deal is assigned.\n    \n- createdByUserId (String) - The ID of the user who created the deal.\n    \n- pipelineId (Number) - The ID of the pipeline to which the deal belongs.\n    \n- amount (String) - The amount associated with the deal.\n    \n- pipelineStageName (String) - The name of the pipeline stage.\n    \n- position (Number) - The position of the deal in the pipeline.\n    \n- pipelineStageId (Number) - The ID of the pipeline stage.\n    \n\n#### Pre-request Script\n\nTo execute the 'Customers' collection before creating a deal, add a pre-request script to call the 'Customers' collection before making the POST request to this endpoint.\n\n#### Example\n\n``` json\n{\n  \"type\": 0,\n  \"dealType\": 15,\n  \"customerContacts\": [\n    {\n      \"customerId\": \"{{customerId}}\",\n      \"contactId\": 0\n    }\n  ],\n  \"description\": \"description\",\n  \"title\": \"deal title\",\n  \"assignedUserId\": \"a0cb3235-ea75-ef11-bdfd-002248 ...\",\n  \"createdByUserId\": \"a0cb3235-ea75-ef11-bdfd-002248 ...\",\n  \"pipelineId\": 34,\n  \"amount\": \"324\",\n  \"pipelineStageName\": \"New Stage\",\n  \"position\": 1,\n  \"pipelineStageId\": 222\n}\n\n ```"
					},
					"response": []
				}
			],
			"id": "e7bed4a9-5908-4b56-bb9f-6754ec1991e1"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0bf1e6a8-ec8f-4257-a731-78b5a0d9d30e",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b0c39b61-8f48-47cc-b27b-9c440e245375",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "categoryDealerId",
			"value": ""
		},
		{
			"key": "customerCategoryId",
			"value": ""
		},
		{
			"key": "categoryLastUpdated",
			"value": ""
		},
		{
			"key": "categoryStatus",
			"value": ""
		},
		{
			"key": "categoryName",
			"value": ""
		},
		{
			"key": "createdCustomerId",
			"value": ""
		},
		{
			"key": "dealAmount",
			"value": ""
		}
	]
}