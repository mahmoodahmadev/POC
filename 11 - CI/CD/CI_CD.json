{
	"info": {
		"_postman_id": "6d9a4d5a-6780-476c-987d-0dc09f6347b3",
		"name": "13 - CI/CD",
		"description": "StartFragment\n\n### **CI/CD in Postman** 🚀\n\nCI/CD (Continuous Integration/Continuous Deployment) in Postman allows you to automate your API testing as part of the build and deployment pipeline, ensuring that tests are executed continuously whenever changes are made to the codebase. This integration improves efficiency, enhances quality, and accelerates delivery by catching issues early in the development cycle.\n\n---\n\n### **Key Benefits of CI/CD in Postman** 🎯\n\n| **Benefit** | **Description** |\n| --- | --- |\n| **Automated Testing** | Automatically execute Postman tests on code changes to catch bugs early. |\n| **Faster Feedback Loop** | Developers and testers get real-time feedback on API functionality. |\n| **Improved Code Quality** | Continuous testing ensures higher code quality and fewer bugs in production. |\n| **Easier Collaboration** | Postman collections and environments are easily shared across teams for collaboration. |\n| **Seamless Integration** | Integrates with CI/CD tools like Jenkins, GitLab CI, and CircleCI for a streamlined workflow. |\n\n---\n\n### **How CI/CD Works with Postman** ⚙️\n\n1. **Create a Postman Collection**:\n    \n    - Develop your API tests in a Postman collection.\n        \n2. **Set Up Environments**:\n    \n    - Use Postman environments to manage different configurations (e.g., dev, staging, production).\n        \n3. **Integrate with CI/CD Pipeline**:\n    \n    - Use Postman’s integration features to link Postman collections with popular CI/CD tools such as Jenkins, GitLab CI, CircleCI, etc.\n        \n4. **Run Tests Automatically**:\n    \n    - Trigger Postman tests whenever code changes are pushed to the repository, ensuring your APIs are tested continuously.\n        \n5. **View Results**:\n    \n    - Get detailed reports on test results to identify failures and issues early.\n        \n\n---\n\n### **Postman CI/CD Integration Options** 🛠️\n\n| **Integration Tool** | **Description** |\n| --- | --- |\n| **Newman** | Newman is the Postman command-line tool that allows you to run Postman collections in the CI/CD pipeline. |\n| **Postman Collection Runner** | Run your Postman collection using the Collection Runner and integrate it into CI/CD systems like Jenkins. |\n| **Postman Monitor** | Set up Postman monitors to run collections periodically and integrate them into CI/CD pipelines. |\n| **Jenkins** | Jenkins can run Postman tests via Newman to verify API functionality on every code change. |\n| **GitHub Actions** | Automate testing with Postman collections using GitHub Actions and trigger runs for pull requests or commits. |\n\n---\n\n### **Setting Up CI/CD with Postman Using Newman** 🏗️\n\n1. **Install Newman**:\n    \n    - nginxCopyEditnpm install -g newman\n        \n2. **Export Postman Collection and Environment**:\n    \n    - Export the Postman collection and environment as `.json` files.\n        \n3. **Write CI/CD Pipeline Script**:\n    \n    - bashCopyEditnewman run .json -e .json\n        \n4. **Configure Test Results Reporting**:\n    \n    - bashCopyEditnewman run .json -e .json --reporters cli,junit --reporter-junit-export results.xml\n        \n5. **Trigger Automated Tests**:\n    \n    - Configure your CI/CD tool to trigger the tests on every code change or pull request.\n        \n\n---\n\n### **Example: Postman CI/CD with GitHub Actions** 🧑‍💻\n\n1. **Set up GitHub Actions Workflow**:\n    \n    - In your GitHub repository, create a `.github/workflows/postman.yml` file.\n        \n2. **Configure the Workflow**:\n    \n    - yamlCopyEditname: Postman API Testson: push: branches: - mainjobs: test: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Set up Node.js uses: actions/setup-node@v2 with: node-version: '14' - name: Install dependencies run: npm install -g newman - name: Run Postman Collection run: newman run collection.json -e environment.json --reporters cli,junit --reporter-junit-export newman-report.xml\n        \n3. **Trigger CI/CD Pipeline**:\n    \n    - The GitHub Actions workflow will run every time you push changes to the main branch.\n        \n\n---\n\n### **Newman Reports in CI/CD** 📊\n\nNewman supports several reporters for displaying test results:\n\n| **Reporter** | **Description** |\n| --- | --- |\n| **CLI** | Outputs results to the terminal for quick checks. |\n| **JUnit** | Outputs test results in JUnit XML format (good for CI/CD). |\n| **HTML** | Generates an HTML file for detailed visual reports. |\n| **JSON** | Outputs results in JSON format (good for further processing). |\n\n---\n\n### **CI/CD Workflow Example: Jenkins** 🏁\n\n1. **Install Newman in Jenkins**:\n    \n    - Install Node.js and Newman in your Jenkins environment.\n        \n2. **Create a Jenkins Job**:\n    \n    - Configure a new Jenkins job to run your Postman collection using Newman on each commit or pull request.\n        \n3. **Jenkins Pipeline Script**:\n    \n    - bashCopyEditnode { stage('Install Dependencies') { sh 'npm install -g newman' } stage('Run Postman Tests') { sh 'newman run collection.json -e environment.json --reporters cli,junit --reporter-junit-export newman-report.xml' }}\n        \n4. **Test Results**:\n    \n    - Jenkins will display results as part of the job output or you can configure it to show reports in JUnit format.\n        \n\n---\n\n### **Best Practices for CI/CD in Postman** 🔑\n\n- **Automate Everything**: Ensure Postman tests run automatically for every commit, pull request, or deployment.\n    \n- **Parallel Testing**: Use parallel testing to speed up the process by running multiple collections simultaneously.\n    \n- **Monitor Test Results**: Set up Postman monitors or CI tools to notify teams about test failures or successes.\n    \n- **Version Control**: Always version your collections and environments so that changes in API endpoints or logic are tracked.\n    \n\n---\n\n### **Conclusion** 🎯\n\nCI/CD integration in Postman allows you to continuously test your APIs, catch bugs early, and accelerate your development pipeline. By using tools like **Newman** and integrating with CI/CD services like **Jenkins** or **GitHub Actions**, you can ensure that your API testing is seamless and automated.\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Jenkins",
			"item": [
				{
					"name": "Create a Department",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2c5fbcd-e006-4a45-b810-864716ecec22",
										"exec": [
											"const response = pm.response.json()",
											"",
											"pm.collectionVariables.set('token', response.authToken)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fd5f0e87-2bd3-45e1-82e6-1ce1612cb8be",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dealerId\": \"{{login_dmsDealerId}}\",\n    \"userName\": \"{{login_username}}\",\n    \"password\": \"{{login_password}}\",\n    \"token\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}/{{authentication_endpoint}}"
							},
							"response": []
						},
						{
							"name": "Get Primary location ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75a35659-69a9-4a91-8401-6c1e4ec6d175",
										"exec": [
											"const response = pm.response.json()",
											"console.log(response)",
											"pm.test('Check if the response code is 200', () => {",
											"    pm.expect(pm.response).to.have.status(200)",
											"})",
											"",
											"const primaryDealerId = response.dealerLocationSettings[0].dealerId",
											"",
											"pm.collectionVariables.set('primaryDealerId', primaryDealerId)",
											"console.log(primaryDealerId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aa000a24-5a0d-47f1-ad4f-b58a22eeb50d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/dealer-api/v2/dealers/:dmsdealerid/settings",
									"host": [
										"{{host}}"
									],
									"path": [
										"dealer-api",
										"v2",
										"dealers",
										":dmsdealerid",
										"settings"
									],
									"variable": [
										{
											"id": "6c92eee0-9dce-4a93-b071-2e01c3e43138",
											"key": "dmsdealerid",
											"value": "{{login_dmsDealerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f9511cf-8d08-4b89-8c65-b968a68e985e",
										"exec": [
											"const response = pm.response.json();",
											"",
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200000);",
											"});",
											"",
											"const crmUserId = response[0].crmUserId",
											"const userId = response[0].userId",
											"console.log(crmUserId)",
											"",
											"pm.collectionVariables.set('crmUserId', crmUserId)",
											"pm.collectionVariables.set('userId', userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4a7722ef-f37a-4a5b-98b9-b2c59ce68ee8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{host}}/{{users_endpoint}}"
							},
							"response": []
						},
						{
							"name": "Create a Department",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c037be26-b167-4e1a-b4c5-67c691a0cd7d",
										"exec": [
											"const departmentName = pm.collectionVariables.replaceIn(\"{{$randomDepartment}}\")",
											"",
											"pm.collectionVariables.set('departmentName', departmentName)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c551815c-e696-4b3c-9afd-d50c1c366ebc",
										"exec": [
											"const response = pm.response.json()",
											"",
											"// Test for a 200 status response",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 3000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(20000);",
											"});",
											"",
											"// Test for the content type of the response",
											"pm.test(\"Content-Type is present and is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Test for the structure and properties of the response body",
											"pm.test(\"Response body has the expected structure and properties\", function () {",
											"    const responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"crmUserIds\");",
											"    pm.expect(responseBody).to.have.property(\"departmentId\");",
											"    pm.expect(responseBody).to.have.property(\"dealerId\");",
											"    pm.expect(responseBody).to.have.property(\"departmentName\");",
											"    pm.expect(responseBody).to.have.property(\"description\");",
											"    pm.expect(responseBody).to.have.property(\"departmentType\");",
											"    pm.expect(responseBody).to.have.property(\"mock\");",
											"    pm.expect(responseBody).to.have.property(\"isFacebookTokenExpired\");",
											"});",
											"",
											"pm.test('Check if the department is created with expected data', () => {",
											"",
											"    // Get the corresponding environment variables",
											"    let expecttedCrmUserId = (pm.collectionVariables.get(\"crmUserId\")).toString();",
											"    let expectedDepartmentName = pm.collectionVariables.get(\"departmentName\");",
											"",
											"    let actualCrmUserId = (response.crmUserIds[0]).toString()",
											"    let actualDepartmentName = response.departmentName",
											"// Check if the response body contains the expected data",
											"",
											"    pm.expect(actualCrmUserId).to.equal(expecttedCrmUserId);",
											"    pm.expect(actualDepartmentName).to.equal(expectedDepartmentName);",
											"})",
											"",
											"pm.collectionVariables.set('created_department_id', response.departmentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "86cb18ba-540c-40bc-b915-855e04cc3560",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"departmentName\": \"{{departmentName}}\",\n    \"dealerId\": \"{{primaryDealerId}}\",\n    \"crmUserIds\": [\n        \"{{crmUserId}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/dealer-api/v2/dealers/:dmsdealerid/departments",
									"host": [
										"{{host}}"
									],
									"path": [
										"dealer-api",
										"v2",
										"dealers",
										":dmsdealerid",
										"departments"
									],
									"variable": [
										{
											"key": "dmsdealerid",
											"value": "{{login_dmsDealerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Deparmtent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "784fe3da-53a2-4aca-a428-e292ad625973",
										"exec": [
											"// Test for status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Test for response time",
											"pm.test(\"Response time is less than 5s\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});",
											"",
											"// Test for content type",
											"pm.test(\"Content-Type is present and is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Test for response body properties",
											"pm.test(\"Response body has required properties\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
											"    pm.expect(jsonData[0]).to.have.property('dealerId');",
											"    pm.expect(jsonData[0]).to.have.property('phoneNumber');",
											"    pm.expect(jsonData[0]).to.have.property('departmentName');",
											"});",
											"",
											"// Test for response body data",
											"pm.test(\"Response body data is valid\", function () {",
											"",
											"    const response = pm.response.json()",
											"",
											"    const expectedDmsDealerId = pm.environment.get('login_dmsDealerId')",
											"    const expectedDealeriId = pm.collectionVariables.get('primaryDealerId')",
											"    const expectedDepartmentName = pm.collectionVariables.get('departmentName')",
											"    const expectedDepartmentId = pm.collectionVariables.get('created_department_id')",
											"",
											"    let departmentData;",
											"",
											"    response.forEach(item => {",
											"        if(item.departmentId == expectedDepartmentId){",
											"            departmentData = item",
											"            console.log(departmentData)",
											"        }",
											"    });",
											"",
											"    pm.expect(departmentData).to.not.be.undefined;",
											"",
											"    const actualDmsDealerId = departmentData.dmsDealerIdCrm",
											"    const actualDealeriId = departmentData.dealerId",
											"    const actualDepartmentName = departmentData.departmentName",
											"    console.log(`${actualDmsDealerId}, ${expectedDmsDealerId}`)",
											"    pm.expect(actualDealeriId).to.equal(expectedDealeriId)",
											"    pm.expect(actualDmsDealerId).to.equal(expectedDmsDealerId)",
											"    pm.expect(actualDepartmentName).to.equal(expectedDepartmentName)",
											"",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3575fe74-a743-4e45-8501-c4d4f4fe9265",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/dealer-api/dealers/dealer-phonenumbers/:dmsdealerid/user/:userid",
									"host": [
										"{{host}}"
									],
									"path": [
										"dealer-api",
										"dealers",
										"dealer-phonenumbers",
										":dmsdealerid",
										"user",
										":userid"
									],
									"variable": [
										{
											"key": "dmsdealerid",
											"value": "{{login_dmsDealerId}}"
										},
										{
											"key": "userid",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "05c1eb33-5511-41a2-b98b-4bd416d8ae65",
					"auth": {
						"type": "bearer",
						"bearer": {
							"token": "{{token}}"
						}
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7090d448-d270-4e3e-ac47-063c67021e4f",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1b076363-1002-41f8-9783-0cbc2622dce5",
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"id": "763ff7c3-c3b3-4760-a5e0-c970378e1bcf"
		}
	],
	"variable": [
		{
			"key": "created_department_id",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "primaryDealerId",
			"value": ""
		},
		{
			"key": "crmUserId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "departmentName",
			"value": ""
		}
	]
}